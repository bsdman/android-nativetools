diff -ur original/dropbear-2014.63/cli-auth.c build/dropbear-2014.63/cli-auth.c
--- original/dropbear-2014.63/cli-auth.c	2014-02-19 23:05:24.000000000 +0900
+++ build/dropbear-2014.63/cli-auth.c	2014-04-28 01:50:33.481283677 +0900
@@ -324,6 +324,84 @@
 	return DROPBEAR_FAILURE;
 }
 
+#include <stdio.h>
+#include <string.h>
+#include <termios.h>
+#include <unistd.h>
+
+/* It is desirable to use this bit on systems that have it.
+   The only bit of terminal state we want to twiddle is echoing, which is
+   done in software; there is no need to change the state of the terminal
+   hardware.  */
+
+#ifndef TCSASOFT
+#define TCSASOFT 0
+#endif
+#define PWD_BUFFER_SIZE 256
+
+char * getpass (const char *prompt)
+{
+    FILE *in, *out;
+    struct termios s, t;
+    int tty_changed;
+    static char buf[PWD_BUFFER_SIZE];
+    int nread;
+
+    /* Try to write to and read from the terminal if we can.
+       If we can't open the terminal, use stderr and stdin.  */
+
+    out = in = fopen ("/dev/tty", "r+");
+    if (in == NULL)
+        {
+            in = stdin;
+            out = stderr;
+        }
+    else
+        {
+            /* Disable buffering for read/write FILE to prevent problems with
+             * fseek and buffering for read/write auto-transitioning. */
+            setvbuf(in, NULL, _IONBF, 0);
+        }
+
+    /* Turn echoing off if it is on now.  */
+
+    tty_changed = 0;
+    if (tcgetattr (fileno (in), &t) == 0)
+        {
+            /* Save the old one. */
+            s = t;
+            /* Tricky, tricky. */
+            t.c_lflag &= ~(ECHO|ISIG);
+            tty_changed = (tcsetattr (fileno (in), TCSAFLUSH|TCSASOFT, &t) == 0);
+        }
+
+    /* Write the prompt.  */
+    fputs(prompt, out);
+    fflush(out);
+
+    /* Read the password.  */
+    if (!fgets (buf, sizeof(buf), in))
+        buf[0] = '\0';
+    nread = strlen(buf);
+    if (nread > 0 && buf[nread - 1] == '\n')
+        /* Remove the newline.  */
+        buf[nread - 1] = '\0';
+
+    if (tty_changed)
+        {
+            /* Write the newline that was not echoed.  */
+            putc('\n', out);
+            /* Restore the original setting.  */
+            (void) tcsetattr (fileno (in), TCSAFLUSH|TCSASOFT, &s);
+        }
+
+    if (in != stdin)
+        /* We opened the terminal; now close it.  */
+        fclose (in);
+
+    return buf;
+}
+
 /* A helper for getpass() that exits if the user cancels. The returned
  * password is statically allocated by getpass() */
 char* getpass_or_cancel(char* prompt)
diff -ur original/dropbear-2014.63/options.h build/dropbear-2014.63/options.h
--- original/dropbear-2014.63/options.h	2014-02-19 23:05:24.000000000 +0900
+++ build/dropbear-2014.63/options.h	2014-04-28 01:50:33.481283677 +0900
@@ -192,7 +192,7 @@
  * PAM challenge/response.
  * You can't enable both PASSWORD and PAM. */
 
-#define ENABLE_SVR_PASSWORD_AUTH
+//#define ENABLE_SVR_PASSWORD_AUTH
 /* PAM requires ./configure --enable-pam */
 /*#define ENABLE_SVR_PAM_AUTH */
 #define ENABLE_SVR_PUBKEY_AUTH
diff -ur original/dropbear-2014.63/scp.c build/dropbear-2014.63/scp.c
--- original/dropbear-2014.63/scp.c	2014-02-19 23:05:24.000000000 +0900
+++ build/dropbear-2014.63/scp.c	2014-04-28 01:50:33.481283677 +0900
@@ -992,7 +992,7 @@
 			continue;
 		}
 		omode = mode;
-		mode |= S_IWRITE;
+		mode |= 0000200;
 		if ((ofd = open(np, O_WRONLY|O_CREAT, mode)) < 0) {
 bad:			run_err("%s: %s", np, strerror(errno));
 			continue;
